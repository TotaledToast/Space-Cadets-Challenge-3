Needed commands:
    clear <>
    incr <>
    decr <>

Needed 'Function':
    while <> not 0 do:
    ...
    ...
    end;

Regex Version of commands:
    ^(\s*)clear (.+);
    ^(\s*)incr (.+);
    ^(\s*)decr (.+);

    ^(\s*)while (.+) not 0 do;

    ^(\s*)end;

Regex Command Finder:
    ^(\s*)(.+) .*

//Dictionaries will be really useful to store 'variables'
//clear is also used to create new variables

System.out.println(element.replaceAll(<Regex Command Finder>, "$2"));
This will split the command from the rest of a regex statement.

System.out.println(element.replaceAll(<REGEX EXPERSSION>, "$2"));
This will split the desired variable name from the rest of the expression.

System.out.println(element.replaceAll(<REGEX EXPERSSION>, "$1"));
This will split the starting white space from the rest of the expression. Will be useful for while loops

Have to read text in from the file
cycle through each line in the file
decipher each command for a line
create or edit any variables if required
keep track of how indented while loops are (planning on finding the corresponding end; using how indented they are)
Create an output of all variable to keep get record of execution


File input = new File("Tester.txt");
        Scanner fileReader = new Scanner(input);
        while (fileReader.hasNextLine()){
            String line = fileReader.nextLine();
            System.out.println(line);
        }
        fileReader.close();

New Functionality:
    //<Comment>
    New Operators:
        <var> = <Var|Number> + <Var|Number>
        <var> = <Var|Number> - <Var|Number>
        <var> = <Var|Number> * <Var|Number>
        <var> = <Var|Number> / <Var|Number>
        <var> = <Var|Number> % <Var|Number>

    if <Var> <Is|Is Not> <Var|Number>;
    ...
    ...
    else If ......

    Appropriate error messages when incorrect syntax is used

    Running Subroutines

Regex for new functionality:
    (\s*)(//)(.*)

    (\s*)(.*) = (.*) (+|-|*|/|%) (.*);

    (\s*) if (.*) (Is|Is Not) (.*);
    (\s*)else if (.*) (Is|Is Not) (.*);
    (\s*)else(.*);



When you reach an if statement it will check if the statement is valid
if it isnt then the code will continue on until it finds a new line at the same whitespace level as the if statement
if this line is an else statement then it will read check if there is another if after the else
if there is another if it will treat the if like its whitespace ends at the else and act like a regular if
if there is no if then the code will run like normal

If the original if is valid then the code will run like normal until it reaches a code with the same whitespace level as the original if
if this line starts with an else then the code will stop being run until the next line with the same whitespace level as the original if
if this line is another else then this is repeated
if not then the code will keep running as normal

Need to store:
    Whitespace amount
    If code is currently being run
    if the if statement is active